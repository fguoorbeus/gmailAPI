/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GmailService_H
#define GmailService_H

#include <TProcessor.h>
#include "gmail_types.h"

namespace gmail_master_server {

class GmailServiceIf {
 public:
  virtual ~GmailServiceIf() {}
  virtual void analyze(const GmailRequest& req) = 0;
};

class GmailServiceIfFactory {
 public:
  typedef GmailServiceIf Handler;

  virtual ~GmailServiceIfFactory() {}

  virtual GmailServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GmailServiceIf* /* handler */) = 0;
};

class GmailServiceIfSingletonFactory : virtual public GmailServiceIfFactory {
 public:
  GmailServiceIfSingletonFactory(const boost::shared_ptr<GmailServiceIf>& iface) : iface_(iface) {}
  virtual ~GmailServiceIfSingletonFactory() {}

  virtual GmailServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GmailServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<GmailServiceIf> iface_;
};

class GmailServiceNull : virtual public GmailServiceIf {
 public:
  virtual ~GmailServiceNull() {}
  void analyze(const GmailRequest& /* req */) {
    return;
  }
};

typedef struct _GmailService_analyze_args__isset {
  _GmailService_analyze_args__isset() : req(false) {}
  bool req;
} _GmailService_analyze_args__isset;

class GmailService_analyze_args {
 public:

  GmailService_analyze_args() {
  }

  virtual ~GmailService_analyze_args() throw() {}

  GmailRequest req;

  _GmailService_analyze_args__isset __isset;

  void __set_req(const GmailRequest& val) {
    req = val;
  }

  bool operator == (const GmailService_analyze_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const GmailService_analyze_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GmailService_analyze_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GmailService_analyze_pargs {
 public:


  virtual ~GmailService_analyze_pargs() throw() {}

  const GmailRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class GmailServiceClient : virtual public GmailServiceIf {
 public:
  GmailServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GmailServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void analyze(const GmailRequest& req);
  void send_analyze(const GmailRequest& req);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GmailServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<GmailServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (GmailServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_analyze(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GmailServiceProcessor(boost::shared_ptr<GmailServiceIf> iface) :
    iface_(iface) {
    processMap_["analyze"] = &GmailServiceProcessor::process_analyze;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~GmailServiceProcessor() {}
};

class GmailServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GmailServiceProcessorFactory(const ::boost::shared_ptr< GmailServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GmailServiceIfFactory > handlerFactory_;
};

class GmailServiceMultiface : virtual public GmailServiceIf {
 public:
  GmailServiceMultiface(std::vector<boost::shared_ptr<GmailServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GmailServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GmailServiceIf> > ifaces_;
  GmailServiceMultiface() {}
  void add(boost::shared_ptr<GmailServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void analyze(const GmailRequest& req) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->analyze(req);
    }
  }

};

} // namespace

#endif
